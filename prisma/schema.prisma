generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      Project[]
  task          Task[]
  report        Report[]
  comment       Comment[]
  replyComment  ReplyComment[]
  requestJoin   RequestJoin[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id         String @id @default(cuid())
  title      String
  inviteCode  String  @default(cuid())
  description String
  createdBy   String
  visibility  String
  createdAt   DateTime      @default(now())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task[]
  memberList  MemberList[]
  requestJoin RequestJoin[]
}

model Task {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  report    Report[]
}

model Report {
  id          String    @id @default(cuid())
  title       String
  description String
  createdBy   String
  createdAt   DateTime  @default(now())
  taskId      String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment     Comment[]
}

model Comment {
  id           String         @id @default(cuid())
  comment      String
  commentBy    String
  createdAt    DateTime       @default(now())
  reportId     String
  userId       String
  report       Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyComment ReplyComment[]
}

model MemberList {
  id         String  @id @default(cuid())
  memberList String
  memberIdList String
  projectId  String
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ReplyComment {
  id        String   @id @default(cuid())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  replyText String
}

model RequestJoin {
  id          String  @id @default(cuid())
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectCode String
  userId      String
  userName    String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
